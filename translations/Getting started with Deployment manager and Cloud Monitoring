#LAB: Google Cloud Fundamentals: Getting Started with Deployment Manager and Cloud Monitoring

#Objective: 
    - In this lab, you will learn how to perform the following tasks:
    - Create a Deployment Manager deployment.
    - Update a Deployment Manager deployment.
    - View the load on a VM instance using Cloud Monitoring.

#Steps:

#Task 1: Make a note of the name of your GCP project. This value is shown in the top bar of the Google Cloud Platform Console. It will be of the form qwiklabs-gcp- followed by hexadecimal numbers.
    Confirm that needed APIs are enabled;
    - Cloud Deployment Manager v2 API
    - Cloud Runtime Configuration API
    - Cloud Monitoring API

    gcloud services enable "Cloud Deployment Manager v2 API" "Cloud Runtime Configuration API" "Cloud Monitoring API"

#Task 2: Create a Deployment Manager Deployment
    For your convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE. At the Cloud Shell prompt, type this partial command:
        export MY_ZONE=

    followed by the zone that Qwiklabs assigned you to. Your complete command will look similar to this:
        export MY_ZONE=us-central1-a

    At the Cloud Shell prompt, download an editable Deployment Manager template:
        gsutil cp gs://cloud-training/gcpfcoreinfra/mydeploy.yaml mydeploy.yaml

    In the Cloud Shell, use the sed command to replace the PROJECT_ID placeholder string with your Google Cloud Platform project ID using this command:
        sed -i -e "s/PROJECT_ID/$DEVSHELL_PROJECT_ID/" mydeploy.yaml

    In the Cloud Shell, use the sed command to replace the ZONE placeholder string with your Google Cloud Platform zone using this command:
        sed -i -e "s/ZONE/$MY_ZONE/" mydeploy.yaml

    View the mydeploy.yaml file, with your modifications, with this command:
        cat mydeploy.yaml

    Build a deployment from the template:
        gcloud deployment-manager deployments create my-first-depl --config mydeploy.yaml

    Result: When the deployment operation is complete, the gcloud command displays a list of the resources named in the template and their current state.

#Task 3: Update a Deployment Manager deployment

    Launch the nano text editor to edit the mydeploy.yaml file:
        nano mydeploy.yaml

    Find the line that sets the value of the startup script, value: "apt-get update", and edit it so that it looks like this:
        value: "apt-get update; apt-get install nginx-light -y"

    Note: Do not disturb the spaces at the beginning of the line. The YAML templating language relies on indented lines as part of its syntax. As you edit the file, be sure that the v in the word value in this new line is immediately below the k in the word key on the line above it.

    Press Ctrl+O and then press Enter to save your edited file, and then press Ctrl+X to exit the nano text editor.

    Return to your Cloud Shell prompt. Enter this command to cause Deployment Manager to update your deployment to install the new startup script:
        gcloud deployment-manager deployments update my-first-depl --config mydeploy.yaml

    Wait for the gcloud command to display a message confirming that the update operation was completed successfully.

    To see all the details, run this command:
        gcloud compute instances describe my-vm

    Confirm that the startup script has been updated to the value you declared in your Deployment Manager template.

#Task 4: View the load on a VM using Cloud Monitoring

    Use the ssh command to open a command prompt on my-vm:
        gcloud compute ssh my-vm

    In the ssh session on my-vm, execute this command to create a CPU load:
        dd if=/dev/urandom | gzip -9 >> /dev/null &

    This Linux pipeline forces the CPU to work on compressing a continuous stream of random data.

    Create a Monitoring workspace
    Using your VM's open SSH window, install both the Monitoring and Logging agents on your project's VM. Run the following command line:

    add the agent's package repository
        curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
        sudo bash add-monitoring-agent-repo.sh

    install the agent:
        sudo yum list --showduplicates stackdriver-agent

    add the agent's package repository
        curl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh
        sudo bash add-logging-agent-repo.sh

    install the agent:
        sudo yum list --showduplicates google-fluentd


    Once both of the agents have been installed on your project's VM, go to navigation menu, select monitoring and click Metrics Explorer under the main Cloud Monitoring menu on the far left.
    Note: You can only access the metrics explorer on Google Cloud Console.

    In the Metric pane of Metrics Explorer, select the resource type GCE VM instance and the metric CPU usage.

    In the resulting graph, notice that CPU usage increased sharply a few minutes ago.

    Terminate your workload generator. Return to your ssh session on my-vm and enter this command:
        kill %1

Congratulations!


